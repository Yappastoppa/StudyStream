Below is a concise summary of how to configure the Mapbox Standard style—both at import time (in your own style JSON) and at runtime via the SDK—with code snippets you can drop straight into your app.

⸻

1. Import-Time Configuration (Style JSON)

When you build a custom style that imports Mapbox Standard, you can pass a config object to tweak its appearance. In your style JSON:

{
  "version": 8,
  "sources": { /* your sources…*/ },
  "layers":  [ /* your layers…*/ ],
  "imports": [
    {
      "id": "basemap",
      "url": "mapbox://styles/mapbox/standard",
      "config": {
        "lightPreset": "dusk",                // dawn | day | dusk | night
        "theme": "monochrome",                // default | faded | monochrome | custom
        "theme-data": "data:image/png;base64,…", // base-64 LUT for custom themes
        "showPlaceLabels": false,             // hide place names
        "showPointofInterestLabels": false,   // hide POIs
        "showRoadLabels": true,               // show/hide road shields
        "showPedestrianRoads": false,         // hide footpaths/trails
        "show3dObjects": true,                // toggle extruded buildings/trees
        "font": "Open Sans Bold",             // choose from 20+ predefined fonts
        "colorMotorways": "#FF0000",          // customize motorway color
        "colorTrunks": "#00FF00",             // customize trunk road color
        "colorRoads": "#0000FF",              // other roads
        "colorPlaceLabelHighlight": "#F00",   // feature-state highlight
        "colorBuildingHighlight": "#0F0"      // building highlight color
      }
    }
  ]
}

	•	lightPreset controls global lighting (dawn/day/dusk/night)  ￼.
	•	Visibility toggles (showPlaceLabels, etc.) let you declutter maps  ￼.
	•	theme and theme-data switch between built-in color palettes or your own LUT  ￼.

⸻

2. Runtime Configuration (Mapbox GL JS)

You can also change most of these options on an already-loaded map instance:

// after map is created and style fully loaded
map.on('load', () => {
  // Change lighting to dusk
  map.setConfigProperty('basemap', 'lightPreset', 'dusk');

  // Hide all place labels
  map.setConfigProperty('basemap', 'showPlaceLabels', false);

  // Switch to monochrome theme
  map.setConfigProperty('basemap', 'theme', 'monochrome');

  // Tweak road colors on the fly
  map.setConfigProperty('basemap', 'colorMotorways', '#FF0000');
  map.setConfigProperty('basemap', 'colorRoads', '#333333');
});

	•	Use map.setConfigProperty(importId, property, value) to toggle any import-time option at runtime  ￼.
	•	The first argument ('basemap') matches the id in your style’s imports array.

⸻

3. Light Presets & Theming

Property	Values
lightPreset	"dawn", "day", "dusk", "night"
theme	"default", "faded", "monochrome", "custom"
theme-data	Base64-encoded LUT image (for custom)

// switch lighting and theme together
map.setConfigProperty('basemap', 'lightPreset', 'night');
map.setConfigProperty('basemap', 'theme', 'faded');


⸻

4. Label & Feature Visibility
	•	Place Labels (cities, towns): showPlaceLabels
	•	Points of Interest (restaurants, shops): showPointofInterestLabels
	•	Road Labels (route shields): showRoadLabels
	•	Pedestrian Roads (paths): showPedestrianRoads
	•	3D Objects (buildings, trees): show3dObjects

// hide pedestrian paths and POIs for a cleaner racer map
map.setConfigProperty('basemap', 'showPedestrianRoads', false);
map.setConfigProperty('basemap', 'showPointofInterestLabels', false);


⸻

5. Fonts & Road Colors
	•	font: pick any from the built-in list (e.g. "Open Sans Semibold", "Roboto Regular")
	•	Road colors:
	•	colorMotorways
	•	colorTrunks
	•	colorRoads

map.setConfigProperty('basemap', 'font', 'Roboto Regular');
map.setConfigProperty('basemap', 'colorTrunks', '#FFA500');


⸻

Summary
	1.	Import-time: use the config block under imports in your style JSON to set defaults.
	2.	Runtime: call map.setConfigProperty('basemap', prop, value) to tweak on the fly.
	3.	Key props: lighting (lightPreset), visibility toggles, theming, fonts, and road colors  ￼.

With these options you can fully customize Mapbox Standard to match your GhostRacer look & feel—no need to rebuild an entire style from scratch!