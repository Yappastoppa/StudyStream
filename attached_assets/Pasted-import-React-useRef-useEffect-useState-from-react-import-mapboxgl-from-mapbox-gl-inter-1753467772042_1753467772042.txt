import React, { useRef, useEffect, useState } from 'react';
import mapboxgl from 'mapbox-gl';

interface Props {
  driverView: boolean;
  center?: [number, number];
  onMapLoaded?: () => void;
}

export default function CleanRacingMap({
  driverView,
  center = [-74.006, 40.7128],
  onMapLoaded,
}: Props) {
  const container = useRef<HTMLDivElement>(null);
  const mapRef = useRef<mapboxgl.Map | null>(null);
  const [errMsg, setErrMsg] = useState<string | null>(null);

  useEffect(() => {
    if (!container.current) {
      setErrMsg('Map container missing');
      return;
    }
    // only init once
    if (!mapRef.current) {
      try {
        mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN || '';
        if (!mapboxgl.accessToken) {
          throw new Error('Missing MAPBOX_TOKEN');
        }
        const map = new mapboxgl.Map({
          container: container.current,
          style: driverView
            ? 'mapbox://styles/mapbox/navigation-night-v1'
            : 'mapbox://styles/mapbox/dark-v10',
          center,
          zoom: driverView ? 15 : 12,
        });
        map.on('load', () => onMapLoaded?.());
        mapRef.current = map;
      } catch (e: any) {
        console.error('Map init failed:', e);
        setErrMsg(e.message);
      }
    } else {
      // just update view
      mapRef.current.setStyle(
        driverView
          ? 'mapbox://styles/mapbox/navigation-night-v1'
          : 'mapbox://styles/mapbox/dark-v10'
      );
      mapRef.current.jumpTo({ center, zoom: driverView ? 15 : 12 });
    }
    return () => {
      // optional teardown
      // mapRef.current?.remove();
    };
  }, [driverView, center, onMapLoaded]);

  return (
    <div style={{ position: 'relative', width: '100%', height: '100%' }}>
      <div
        ref={container}
        style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0 }}
      />
      {errMsg && (
        <div
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            zIndex: 9999,
            color: 'white',
            background: 'rgba(255,0,0,0.7)',
            padding: '0.5rem',
          }}
        >
          Error: {errMsg}
        </div>
      )}
      <div
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          zIndex: 9998,
          color: 'white',
          fontSize: 12,
          padding: '0.25rem',
        }}
      >
        DEBUG: container={container.current ? 'OK' : 'MISSING'} mapRef=
        {mapRef.current ? 'OK' : 'NULL'}
      </div>
    </div>
  );
}